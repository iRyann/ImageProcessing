package isilimageprocessing;

import CImage.*;
import CImage.Exceptions.*;
import CImage.Observers.*;
import CImage.Observers.Events.*;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Contours.ContoursLineaire;
import ImageProcessing.Contours.ContoursNonLineaire;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import ImageProcessing.Lineaire.FiltrageLineaireGlobal;
import ImageProcessing.Lineaire.FiltrageLineaireLocal;
import ImageProcessing.NonLineaire.MorphoComplexe;
import ImageProcessing.NonLineaire.MorphoElementaire;
import ImageProcessing.Seuillage.Seuillage;
import isilimageprocessing.Dialogues.*;
import java.awt.*;
import java.io.*;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author  HP_Propriï¿½taire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener,SelectLigneListener,SelectRectListener,SelectRectFillListener,SelectCercleListener,SelectCercleFillListener 
{
    private CImageRGB imageRGB;
    private CImageNG  imageNG;
    
    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int   couleurPinceauNG;
    
    /** Creates new form TestCImage2 */
    public IsilImageProcessing() 
    {
        initComponents();
        
        imageRGB = null;
        imageNG  = null;
        
        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);
        
        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
        
        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jMenuItem6 = new javax.swing.JMenuItem();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeAfficherParamImage = new javax.swing.JMenuItem();
        jMenuFiltrageLineaire = new javax.swing.JMenu();
        jMenuFiltrageLineaireGlobal = new javax.swing.JMenu();
        jMenuItemFiltrePasseBasIdeal = new javax.swing.JMenuItem();
        jMenuItemFiltrePasseHautIdeal = new javax.swing.JMenuItem();
        jMenuItemFiltrePasseBasButterworth = new javax.swing.JMenuItem();
        jMenuItemFiltrePasseHautButterworth = new javax.swing.JMenuItem();
        jMenuFiltrageLineaireLocal = new javax.swing.JMenu();
        jMenuItemMasqueConvolution = new javax.swing.JMenuItem();
        jMenuItemFiltreMoyenneur = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaire = new javax.swing.JMenu();
        jMenuTraitementNonLineaireElementaire = new javax.swing.JMenu();
        jMenuItemErosion = new javax.swing.JMenuItem();
        jMenuItemDilatation = new javax.swing.JMenuItem();
        jMenuItemOuverture = new javax.swing.JMenuItem();
        jMenuItemFermeture = new javax.swing.JMenuItem();
        jMenuTraitementNonLineaireComplexe = new javax.swing.JMenu();
        jMenuItemDilatationGeodesique = new javax.swing.JMenuItem();
        jMenuItemReconstructionGeodesique = new javax.swing.JMenuItem();
        jMenuItemFiltreMedian = new javax.swing.JMenuItem();
        jMenuContour = new javax.swing.JMenu();
        jMenuContourLineaire = new javax.swing.JMenu();
        jMenuItemGradientPrewitt = new javax.swing.JMenuItem();
        jMenuItemGradientSobel = new javax.swing.JMenuItem();
        jMenuItemLaplacien4 = new javax.swing.JMenuItem();
        jMenuItemLaplacien8 = new javax.swing.JMenuItem();
        jMenuContourNonLineaire = new javax.swing.JMenu();
        jMenuItemGradientErosion = new javax.swing.JMenuItem();
        jMenuItemGradientDilatation = new javax.swing.JMenuItem();
        jMenuItemGradientBeucher = new javax.swing.JMenuItem();
        jMenuItemLaplacienNonLineaire = new javax.swing.JMenuItem();
        jMenuSeuillage = new javax.swing.JMenu();
        jMenuItemSeuillageSimple = new javax.swing.JMenuItem();
        jMenuItemSeuillageDouble = new javax.swing.JMenuItem();
        jMenuItemSeuillageAutomatique = new javax.swing.JMenuItem();

        jMenuItem6.setText("jMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Isil Image Processing");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        jMenuHistogrammeAfficherParamImage.setText("Afficher les paramÃ¨tres de l'image");
        jMenuHistogrammeAfficherParamImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherParamImageActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficherParamImage);

        jMenuBar1.add(jMenuHistogramme);

        jMenuFiltrageLineaire.setText("Filtrage linÃ©aire");

        jMenuFiltrageLineaireGlobal.setText("Global");

        jMenuItemFiltrePasseBasIdeal.setText("Passe bas idÃ©al");
        jMenuItemFiltrePasseBasIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrePasseBasIdealActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuItemFiltrePasseBasIdeal);

        jMenuItemFiltrePasseHautIdeal.setText("Passe haut idÃ©al");
        jMenuItemFiltrePasseHautIdeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrePasseHautIdealActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuItemFiltrePasseHautIdeal);

        jMenuItemFiltrePasseBasButterworth.setText("Passe bas Butterworth");
        jMenuItemFiltrePasseBasButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrePasseBasButterworthActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuItemFiltrePasseBasButterworth);

        jMenuItemFiltrePasseHautButterworth.setText("Passe haut Butterworth");
        jMenuItemFiltrePasseHautButterworth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltrePasseHautButterworthActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireGlobal.add(jMenuItemFiltrePasseHautButterworth);

        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireGlobal);

        jMenuFiltrageLineaireLocal.setText("Local");

        jMenuItemMasqueConvolution.setText("Filtre masque convolution");
        jMenuItemMasqueConvolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMasqueConvolutionActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuItemMasqueConvolution);

        jMenuItemFiltreMoyenneur.setText("Filtre moyenneur");
        jMenuItemFiltreMoyenneur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltreMoyenneurActionPerformed(evt);
            }
        });
        jMenuFiltrageLineaireLocal.add(jMenuItemFiltreMoyenneur);

        jMenuFiltrageLineaire.add(jMenuFiltrageLineaireLocal);

        jMenuBar1.add(jMenuFiltrageLineaire);

        jMenuTraitementNonLineaire.setText("Traitement non-linÃ©aire");

        jMenuTraitementNonLineaireElementaire.setText("Elementaire");

        jMenuItemErosion.setText("Erosion");
        jMenuItemErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErosionActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuItemErosion);

        jMenuItemDilatation.setText("Dilatation");
        jMenuItemDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuItemDilatation);

        jMenuItemOuverture.setText("Ouverture");
        jMenuItemOuverture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvertureActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuItemOuverture);

        jMenuItemFermeture.setText("Fermeture");
        jMenuItemFermeture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFermetureActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireElementaire.add(jMenuItemFermeture);

        jMenuTraitementNonLineaire.add(jMenuTraitementNonLineaireElementaire);

        jMenuTraitementNonLineaireComplexe.setText("Complexe");

        jMenuItemDilatationGeodesique.setText("Dilatation gÃ©odÃ©sique");
        jMenuItemDilatationGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDilatationGeodesiqueActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuItemDilatationGeodesique);

        jMenuItemReconstructionGeodesique.setText("Reconstruction gÃ©odÃ©sique");
        jMenuItemReconstructionGeodesique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReconstructionGeodesiqueActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuItemReconstructionGeodesique);

        jMenuItemFiltreMedian.setText("Filtre mÃ©dian");
        jMenuItemFiltreMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltreMedianActionPerformed(evt);
            }
        });
        jMenuTraitementNonLineaireComplexe.add(jMenuItemFiltreMedian);

        jMenuTraitementNonLineaire.add(jMenuTraitementNonLineaireComplexe);

        jMenuBar1.add(jMenuTraitementNonLineaire);

        jMenuContour.setText("Contour");

        jMenuContourLineaire.setText("LinÃ©aire");

        jMenuItemGradientPrewitt.setText("Gradient Prewitt");
        jMenuItemGradientPrewitt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientPrewittActionPerformed(evt);
            }
        });
        jMenuContourLineaire.add(jMenuItemGradientPrewitt);

        jMenuItemGradientSobel.setText("Gradient Sobel");
        jMenuItemGradientSobel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientSobelActionPerformed(evt);
            }
        });
        jMenuContourLineaire.add(jMenuItemGradientSobel);

        jMenuItemLaplacien4.setText("Laplacien 4");
        jMenuItemLaplacien4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacien4ActionPerformed(evt);
            }
        });
        jMenuContourLineaire.add(jMenuItemLaplacien4);

        jMenuItemLaplacien8.setText("Laplacien 8");
        jMenuItemLaplacien8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacien8ActionPerformed(evt);
            }
        });
        jMenuContourLineaire.add(jMenuItemLaplacien8);

        jMenuContour.add(jMenuContourLineaire);

        jMenuContourNonLineaire.setText("Non-linÃ©aire");

        jMenuItemGradientErosion.setText("Gradient Ã©rosion");
        jMenuItemGradientErosion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientErosionActionPerformed(evt);
            }
        });
        jMenuContourNonLineaire.add(jMenuItemGradientErosion);

        jMenuItemGradientDilatation.setText("Gradient dilatation");
        jMenuItemGradientDilatation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientDilatationActionPerformed(evt);
            }
        });
        jMenuContourNonLineaire.add(jMenuItemGradientDilatation);

        jMenuItemGradientBeucher.setText("Gradient Beucher");
        jMenuItemGradientBeucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGradientBeucherActionPerformed(evt);
            }
        });
        jMenuContourNonLineaire.add(jMenuItemGradientBeucher);

        jMenuItemLaplacienNonLineaire.setText("Laplacien non-linÃ©aire");
        jMenuItemLaplacienNonLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLaplacienNonLineaireActionPerformed(evt);
            }
        });
        jMenuContourNonLineaire.add(jMenuItemLaplacienNonLineaire);

        jMenuContour.add(jMenuContourNonLineaire);

        jMenuBar1.add(jMenuContour);

        jMenuSeuillage.setText("Seuillage");

        jMenuItemSeuillageSimple.setText("Seuillage simple");
        jMenuItemSeuillageSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageSimpleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageSimple);

        jMenuItemSeuillageDouble.setText("Seuillage double");
        jMenuItemSeuillageDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageDoubleActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageDouble);

        jMenuItemSeuillageAutomatique.setText("Seuillage automatique");
        jMenuItemSeuillageAutomatique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeuillageAutomatiqueActionPerformed(evt);
            }
        });
        jMenuSeuillage.add(jMenuItemSeuillageAutomatique);

        jMenuBar1.add(jMenuSeuillage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(901, 483));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }
        
        // Crï¿½ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for(int i=0 ; i<256 ; i++) serie.add(i,histo[i]);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);
        
        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme","Niveaux de gris","Nombre de pixels",dataset,PlotOrientation.VERTICAL,false,false,false);

        XYPlot plot = (XYPlot)chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0,255);
        plot.setDomainAxis(axeX);
        
        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image",chart);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
    }
    
    private void activeMenusRGB()
    {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }
    
    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieImaginaire,"Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,partieReelle,"Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,phase,"Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try 
        {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for(int i=0 ; i<imageNG.getLargeur() ; i++)
                for(int j=0 ; j<imageNG.getHauteur() ; j++) f[i][j] = (double)(f_int[i][j]);
            
            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();
            
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this,true,module,"Fourier : Affichage du module");
            dialog.setVisible(true);
        } 
        catch (CImageNGException ex) 
        {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    if (imageRGB != null) imageRGB.enregistreFormatPNG(fichier);
                    if (imageNG != null) imageNG.enregistreFormatPNG(fichier);
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this,true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null)
        {
            Color newC = JColorChooser.showDialog(this,"Couleur du pinceau",couleurPinceauRGB);
            if (newC != null) couleurPinceauRGB = newC;
            observer.setCouleurPinceau(couleurPinceauRGB);
        }
        
        if (imageNG != null)
        {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this,true,couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected()) observer.setMode(JLabelBeanCImage.INACTIF);
        else
        {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this,true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
	File fichier;
			
	choix.setCurrentDirectory(new File ("."));
	if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
	{
            fichier = choix.getSelectedFile();
            if (fichier != null)
            {
                try 
                {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } 
                catch (IOException ex) 
                {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
	}
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    private void jMenuItemFiltrePasseBasIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltrePasseBasIdealActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la frequence de coupure");
            dialog.setVisible(true);

            double freq = dialog.getValue();
            int frequenceCoupure = (int) freq;

            int[][] imageFiltree = FiltrageLineaireGlobal.filtrePasseBasIdeal(imageNG.getMatrice(), frequenceCoupure);
            System.out.println("Filtrage lineaire passe bas effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltrePasseBasIdealActionPerformed

    private void jMenuItemFiltrePasseHautIdealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltrePasseHautIdealActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la frequence de coupure");
            dialog.setVisible(true);

            double freq = dialog.getValue();
            int frequenceCoupure = (int) freq;

            int[][] imageFiltree = FiltrageLineaireGlobal.filtrePasseHautIdeal(imageNG.getMatrice(), frequenceCoupure);
            System.out.println("Filtrage lineaire passe haut effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltrePasseHautIdealActionPerformed

    private void jMenuItemFiltrePasseBasButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltrePasseBasButterworthActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la frequence de coupure");
            dialog.setVisible(true);

            double freq = dialog.getValue();
            int frequenceCoupure = (int) freq;


            JDialogFiltrageLineaire filtrageLineaire2 = new JDialogFiltrageLineaire(this,true, "Entrer l'ordre");
            filtrageLineaire2.setVisible(true);

            double o = filtrageLineaire2.getValue();
            int ordre = (int) o;

            int[][] imageFiltree = FiltrageLineaireGlobal.filtrePasseBasButterworth(imageNG.getMatrice(), frequenceCoupure, ordre);
            System.out.println("Filtrage lineaire passe bas Butterworth effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltrePasseBasButterworthActionPerformed

    private void jMenuItemFiltrePasseHautButterworthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltrePasseHautButterworthActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la frequence de coupure");
            dialog.setVisible(true);

            double freq = dialog.getValue();
            int frequenceCoupure = (int) freq;


            JDialogFiltrageLineaire filtrageLineaire2 = new JDialogFiltrageLineaire(this,true, "Entrer l'ordre");
            filtrageLineaire2.setVisible(true);

            double o = filtrageLineaire2.getValue();
            int ordre = (int) o;

            int[][] imageFiltree = FiltrageLineaireGlobal.filtrePasseHautButterworth(imageNG.getMatrice(), frequenceCoupure, ordre);
            System.out.println("Filtrage lineaire passe haut Butterworth effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltrePasseHautButterworthActionPerformed

    private void jMenuItemMasqueConvolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMasqueConvolutionActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la frequence de coupure");
            dialog.setVisible(true);

            double freq = dialog.getValue();
            int frequenceCoupure = (int) freq;


            int[][] imageFiltree = FiltrageLineaireLocal.filtreMasqueConvolution(imageNG.getMatrice(), new double[frequenceCoupure][frequenceCoupure]);
            System.out.println("Filtrage lineaire passe bas Butterworth effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemMasqueConvolutionActionPerformed

    private void jMenuItemFiltreMoyenneurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltreMoyenneurActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double t = dialog.getValue();
            int tailleMasque = (int) t;


            int[][] imageFiltree = FiltrageLineaireLocal.filtreMoyenneur(imageNG.getMatrice(), tailleMasque);
            System.out.println("Filtrage lineaire moyenneur effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltreMoyenneurActionPerformed

    private void jMenuItemErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemErosionActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;

            int[][] imageFiltree = MorphoElementaire.erosion(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire erosion effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemErosionActionPerformed

    private void jMenuItemDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;


            int[][] imageFiltree = MorphoElementaire.dilatation(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire dilatation effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemDilatationActionPerformed

    private void jMenuItemOuvertureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvertureActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;


            int[][] imageFiltree = MorphoElementaire.ouverture(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire ouverture effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemOuvertureActionPerformed

    private void jMenuItemFermetureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFermetureActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;


            int[][] imageFiltree = MorphoElementaire.fermeture(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire fermeture effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFermetureActionPerformed

    private void jMenuItemReconstructionGeodesiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReconstructionGeodesiqueActionPerformed
        // TODO add your handling code here:
//        try {
//            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
//            dialog.setVisible(true);
//
//            double v = dialog.getValue();
//            int tailleMasque = (int) v;
//
//
//            int[][] imageFiltree = MorphoComplexe.reconstructionGeodesique(imageNG.getMatrice(), )
//            System.out.println("Morpho elementaire erosion effectuee");
//            imageNG.setMatrice(imageFiltree);
//        } catch (CImageNGException e) {
//            System.out.println("CImageNGException : " + e.getMessage());
//        }
    }//GEN-LAST:event_jMenuItemReconstructionGeodesiqueActionPerformed

    private void jMenuItemFiltreMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltreMedianActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;

            int[][] imageFiltree = MorphoComplexe.filtreMedian(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire erosion effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFiltreMedianActionPerformed

    private void jMenuItemDilatationGeodesiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDilatationGeodesiqueActionPerformed
        // TODO add your handling code here:
//        try {
//            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
//            dialog.setVisible(true);
//
//            double v = dialog.getValue();
//            int tailleMasque = (int) v;
//
//
//            int[][] imageFiltree = MorphoComplexe.dilatationGeodesique(imageNG.getMatrice(), , );
//            System.out.println("Morpho elementaire erosion effectuee");
//            imageNG.setMatrice(imageFiltree);
//        } catch (CImageNGException e) {
//            System.out.println("CImageNGException : " + e.getMessage());
//        }
    }//GEN-LAST:event_jMenuItemDilatationGeodesiqueActionPerformed

    private void jMenuItemGradientPrewittActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientPrewittActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;


            int[][] imageFiltree = ContoursLineaire.gradientPrewitt(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire erosion effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGradientPrewittActionPerformed

    private void jMenuItemGradientSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientSobelActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer la taille du masque");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int tailleMasque = (int) v;


            int[][] imageFiltree = ContoursLineaire.gradientSobel(imageNG.getMatrice(), tailleMasque);
            System.out.println("Morpho elementaire erosion effectuee");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGradientSobelActionPerformed

    private void jMenuItemLaplacien4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacien4ActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = ContoursLineaire.laplacien4(imageNG.getMatrice());
            System.out.println("Contour Laplacien 4 effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemLaplacien4ActionPerformed

    private void jMenuItemLaplacien8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacien8ActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = ContoursLineaire.laplacien8(imageNG.getMatrice());
            System.out.println("Contour Laplacien 8 effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemLaplacien8ActionPerformed

    private void jMenuItemGradientErosionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientErosionActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = ContoursNonLineaire.gradientErosion(imageNG.getMatrice());
            System.out.println("Contour gradient erosion effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGradientErosionActionPerformed

    private void jMenuItemGradientDilatationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientDilatationActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = ContoursNonLineaire.gradientDilatation(imageNG.getMatrice());
            System.out.println("Contour gradient dilatation effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGradientDilatationActionPerformed

    private void jMenuItemGradientBeucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGradientBeucherActionPerformed
        // TODO add your handling code here:
        try {
            int[][] imageFiltree = ContoursNonLineaire.gradientBeucher(imageNG.getMatrice());
            System.out.println("Contour gradient Beucher effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemGradientBeucherActionPerformed

    private void jMenuItemLaplacienNonLineaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLaplacienNonLineaireActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = ContoursNonLineaire.laplacienNonLineaire(imageNG.getMatrice());
            System.out.println("Contour Laplacien non lineaire effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemLaplacienNonLineaireActionPerformed

    private void jMenuItemSeuillageSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageSimpleActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer le seuil");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int seuil = (int) v;


            int[][] imageFiltree = Seuillage.seuillageSimple(imageNG.getMatrice(), seuil);
            System.out.println("Seuillage simple effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemSeuillageSimpleActionPerformed

    private void jMenuItemSeuillageDoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageDoubleActionPerformed
        // TODO add your handling code here:
        try {
            JDialogFiltrageLineaire dialog = new JDialogFiltrageLineaire(this,true, "Entrer le premier seuil");
            dialog.setVisible(true);

            double v = dialog.getValue();
            int seuil = (int) v;

            JDialogFiltrageLineaire dialog2 = new JDialogFiltrageLineaire(this,true, "Entrer le deuxieme seuil");
            dialog2.setVisible(true);

            double v2 = dialog2.getValue();
            int seuil2 = (int) v;


            int[][] imageFiltree = Seuillage.seuillageDouble(imageNG.getMatrice(), seuil, seuil2);
            System.out.println("Seuillage double effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemSeuillageDoubleActionPerformed

    private void jMenuItemSeuillageAutomatiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeuillageAutomatiqueActionPerformed
        // TODO add your handling code here:
        try {

            int[][] imageFiltree = Seuillage.seuillageAutomatique(imageNG.getMatrice());
            System.out.println("Seuillage automatique effectue");
            imageNG.setMatrice(imageFiltree);
        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItemSeuillageAutomatiqueActionPerformed

    private void jMenuHistogrammeAfficherParamImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherParamImageActionPerformed
        // TODO add your handling code here:

        try {
            int hauteur = imageNG.getMatrice().length;
            int largeur = imageNG.getMatrice()[0].length;
            int minimum = Histogramme.minimum(imageNG.getMatrice());
            int maximum = Histogramme.maximum(imageNG.getMatrice());
            int luminance = Histogramme.luminance(imageNG.getMatrice());
            double contraste1 = Histogramme.contraste1(imageNG.getMatrice());
            double contraste2 = Histogramme.contraste2(imageNG.getMatrice());

            System.out.println("hauteur : " + hauteur);
            System.out.println("largeur : " + largeur);
            System.out.println("minimum : " + minimum);
            System.out.println("maximum : " + maximum);
            System.out.println("luminance : " + luminance);
            System.out.println("contraste1 : " + contraste1);
            System.out.println("contraste2 : " + contraste2);


            JDialogParamImage dialog = new JDialogParamImage(this,true, hauteur, largeur, minimum, maximum, luminance, contraste1, contraste2);
            dialog.setVisible(true);



        } catch (CImageNGException e) {
            System.out.println("CImageNGException : " + e.getMessage());
        }








    }//GEN-LAST:event_jMenuHistogrammeAfficherParamImageActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) 
    {
        if (jCheckBoxMenuItemDessinerPixel.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.setPixel(e.getX(),e.getY(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.setPixel(e.getX(),e.getY(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerLigne.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.DessineLigne(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCercle.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.DessineCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null)
                    imageRGB.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null)
                    imageNG.RemplitCercle(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) 
    {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
        {   
            try 
            {
                if (imageRGB != null) 
                    imageRGB.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauRGB);
                if (imageNG != null) 
                    imageNG.RemplitRect(e.getX1(),e.getY1(),e.getX2(),e.getY2(),couleurPinceauNG);
            } 
            catch (CImageRGBException ex) 
            { System.out.println("Erreur RGB : " + ex.getMessage()); }
            catch (CImageNGException ex) 
            { System.out.println("Erreur NG : " + ex.getMessage()); }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuContour;
    private javax.swing.JMenu jMenuContourLineaire;
    private javax.swing.JMenu jMenuContourNonLineaire;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFiltrageLineaire;
    private javax.swing.JMenu jMenuFiltrageLineaireGlobal;
    private javax.swing.JMenu jMenuFiltrageLineaireLocal;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenuItem jMenuHistogrammeAfficherParamImage;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemDilatation;
    private javax.swing.JMenuItem jMenuItemDilatationGeodesique;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemErosion;
    private javax.swing.JMenuItem jMenuItemFermeture;
    private javax.swing.JMenuItem jMenuItemFiltreMedian;
    private javax.swing.JMenuItem jMenuItemFiltreMoyenneur;
    private javax.swing.JMenuItem jMenuItemFiltrePasseBasButterworth;
    private javax.swing.JMenuItem jMenuItemFiltrePasseBasIdeal;
    private javax.swing.JMenuItem jMenuItemFiltrePasseHautButterworth;
    private javax.swing.JMenuItem jMenuItemFiltrePasseHautIdeal;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemGradientBeucher;
    private javax.swing.JMenuItem jMenuItemGradientDilatation;
    private javax.swing.JMenuItem jMenuItemGradientErosion;
    private javax.swing.JMenuItem jMenuItemGradientPrewitt;
    private javax.swing.JMenuItem jMenuItemGradientSobel;
    private javax.swing.JMenuItem jMenuItemLaplacien4;
    private javax.swing.JMenuItem jMenuItemLaplacien8;
    private javax.swing.JMenuItem jMenuItemLaplacienNonLineaire;
    private javax.swing.JMenuItem jMenuItemMasqueConvolution;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuverture;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenuItem jMenuItemReconstructionGeodesique;
    private javax.swing.JMenuItem jMenuItemSeuillageAutomatique;
    private javax.swing.JMenuItem jMenuItemSeuillageDouble;
    private javax.swing.JMenuItem jMenuItemSeuillageSimple;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenu jMenuSeuillage;
    private javax.swing.JMenu jMenuTraitementNonLineaire;
    private javax.swing.JMenu jMenuTraitementNonLineaireComplexe;
    private javax.swing.JMenu jMenuTraitementNonLineaireElementaire;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
    
}
